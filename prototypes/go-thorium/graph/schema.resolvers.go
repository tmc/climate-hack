package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"go-thorium/graph/model"
	"time"
)

// InformNonBeliver is the resolver for the informNonBeliver field.
func (r *mutationResolver) InformNonBeliver(ctx context.Context, input model.InformNonBeliverInput) (*model.InformNonBeliverPayload, error) {
	_id++
	fact := r.service.GetThoriumFact(ctx)
	if err := r.service.SendSMS(ctx, input.Phone, fact); err != nil {
		return nil, err
	}
	return &model.InformNonBeliverPayload{
		Conversation: &model.Conversation{
			ID: fmt.Sprint(_id),
		},
	}, nil
}

// StartConversation is the resolver for the startConversation field.
func (r *mutationResolver) StartConversation(ctx context.Context, input model.StartConversationInput) (*model.StartConversationPayload, error) {
	return nil, fmt.Errorf("not implemented: StartConversation - startConversation")
}

// ContinueConversation is the resolver for the continueConversation field.
func (r *mutationResolver) ContinueConversation(ctx context.Context, input model.ContinueConversationInput) (*model.ContinueConversationPayload, error) {
	return nil, fmt.Errorf("not implemented: ContinueConversation - continueConversation")
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	return &model.User{
		ID:    "1",
		Phone: "+123456789",
	}, nil
}

// MessageAdded is the resolver for the messageAdded field.
func (r *subscriptionResolver) MessageAdded(ctx context.Context, conversationID string) (<-chan *model.Message, error) {
	msgs := make(chan *model.Message)
	go func() {
		for {
			_id++
			id := fmt.Sprint(_id)
			msgs <- &model.Message{
				ID:   id,
				Body: "Hello World " + id,
			}
			time.Sleep(time.Second)
		}
	}()
	return msgs, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var _id = 0
